/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { BlogAnalyticsService } from "../blogAnalytics.service";
import { BlogAnalyticsCreateInput } from "./BlogAnalyticsCreateInput";
import { BlogAnalytics } from "./BlogAnalytics";
import { BlogAnalyticsFindManyArgs } from "./BlogAnalyticsFindManyArgs";
import { BlogAnalyticsWhereUniqueInput } from "./BlogAnalyticsWhereUniqueInput";
import { BlogAnalyticsUpdateInput } from "./BlogAnalyticsUpdateInput";

export class BlogAnalyticsControllerBase {
  constructor(protected readonly service: BlogAnalyticsService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: BlogAnalytics })
  async createBlogAnalytics(
    @common.Body() data: BlogAnalyticsCreateInput
  ): Promise<BlogAnalytics> {
    return await this.service.createBlogAnalytics({
      data: data,
      select: {
        blogPost: true,
        createdAt: true,
        id: true,
        likes: true,
        shares: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [BlogAnalytics] })
  @ApiNestedQuery(BlogAnalyticsFindManyArgs)
  async blogAnalyticsItems(
    @common.Req() request: Request
  ): Promise<BlogAnalytics[]> {
    const args = plainToClass(BlogAnalyticsFindManyArgs, request.query);
    return this.service.blogAnalyticsItems({
      ...args,
      select: {
        blogPost: true,
        createdAt: true,
        id: true,
        likes: true,
        shares: true,
        updatedAt: true,
        views: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: BlogAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async blogAnalytics(
    @common.Param() params: BlogAnalyticsWhereUniqueInput
  ): Promise<BlogAnalytics | null> {
    const result = await this.service.blogAnalytics({
      where: params,
      select: {
        blogPost: true,
        createdAt: true,
        id: true,
        likes: true,
        shares: true,
        updatedAt: true,
        views: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: BlogAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateBlogAnalytics(
    @common.Param() params: BlogAnalyticsWhereUniqueInput,
    @common.Body() data: BlogAnalyticsUpdateInput
  ): Promise<BlogAnalytics | null> {
    try {
      return await this.service.updateBlogAnalytics({
        where: params,
        data: data,
        select: {
          blogPost: true,
          createdAt: true,
          id: true,
          likes: true,
          shares: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: BlogAnalytics })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteBlogAnalytics(
    @common.Param() params: BlogAnalyticsWhereUniqueInput
  ): Promise<BlogAnalytics | null> {
    try {
      return await this.service.deleteBlogAnalytics({
        where: params,
        select: {
          blogPost: true,
          createdAt: true,
          id: true,
          likes: true,
          shares: true,
          updatedAt: true,
          views: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}

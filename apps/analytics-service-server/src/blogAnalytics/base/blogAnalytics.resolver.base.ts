/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { BlogAnalytics } from "./BlogAnalytics";
import { BlogAnalyticsCountArgs } from "./BlogAnalyticsCountArgs";
import { BlogAnalyticsFindManyArgs } from "./BlogAnalyticsFindManyArgs";
import { BlogAnalyticsFindUniqueArgs } from "./BlogAnalyticsFindUniqueArgs";
import { CreateBlogAnalyticsArgs } from "./CreateBlogAnalyticsArgs";
import { UpdateBlogAnalyticsArgs } from "./UpdateBlogAnalyticsArgs";
import { DeleteBlogAnalyticsArgs } from "./DeleteBlogAnalyticsArgs";
import { BlogAnalyticsService } from "../blogAnalytics.service";
@graphql.Resolver(() => BlogAnalytics)
export class BlogAnalyticsResolverBase {
  constructor(protected readonly service: BlogAnalyticsService) {}

  async _blogAnalyticsItemsMeta(
    @graphql.Args() args: BlogAnalyticsCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [BlogAnalytics])
  async blogAnalyticsItems(
    @graphql.Args() args: BlogAnalyticsFindManyArgs
  ): Promise<BlogAnalytics[]> {
    return this.service.blogAnalyticsItems(args);
  }

  @graphql.Query(() => BlogAnalytics, { nullable: true })
  async blogAnalytics(
    @graphql.Args() args: BlogAnalyticsFindUniqueArgs
  ): Promise<BlogAnalytics | null> {
    const result = await this.service.blogAnalytics(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => BlogAnalytics)
  async createBlogAnalytics(
    @graphql.Args() args: CreateBlogAnalyticsArgs
  ): Promise<BlogAnalytics> {
    return await this.service.createBlogAnalytics({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => BlogAnalytics)
  async updateBlogAnalytics(
    @graphql.Args() args: UpdateBlogAnalyticsArgs
  ): Promise<BlogAnalytics | null> {
    try {
      return await this.service.updateBlogAnalytics({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => BlogAnalytics)
  async deleteBlogAnalytics(
    @graphql.Args() args: DeleteBlogAnalyticsArgs
  ): Promise<BlogAnalytics | null> {
    try {
      return await this.service.deleteBlogAnalytics(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
